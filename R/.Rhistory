library(plsdepot)
install.packages(pls)
install.packages(plsdepot)
install.packages("plsdepot"")
library(pls)
install.packages(c("arm", "BH", "car", "cluster", "coda", "coin", "colorspace", "DBI", "digest", "estimability", "evaluate", "ggplot2", "HSAUR2", "knitr", "lavaan", "lsmeans", "mnormt", "mvtnorm", "pbkrtest", "psych", "R6", "Rcpp", "RcppEigen", "reshape2", "scales", "snow", "SparseM", "stringi", "stringr", "survival", "TH.data", "yaml", "zoo"))
install.packages("pls")
install.packages("plsdepot")
library(pls)
data(yarn)
data(oliveoil)
data(gasoline)
gasTrain <- gasoline[1:50,]
gasTest <- gasoline[51:60,]
gas1 <- plsr(octane ~ NIR, ncomp=10, data=gasTrain, validation="LOO")
summary(gas1)
plot(RMSEP(gas1),legendpos="topright")
knitr::opts_chunk$set(echo = TRUE)
summary(cars)
plot(pressure)
api.token <- "5a14745dcc753"
symbol <- "PPC.US"
ticker.link <- paste(“http://eodhistoricaldata.com/api/eod/”, symbol, “?api_token=”, api.token, “&period=m&order=d”, sep=””)
ticker.link <- paste("http://eodhistoricaldata.com/api/eod/", symbol, “?api_token=”, api.token, “&period=m&order=d”, sep=””)
ticker.link <- paste("http://eodhistoricaldata.com/api/eod/", symbol, "?api_token=", api.token, "&period=m&order=d", sep="")
data <- read.csv(url(ticker.link))
head(data)
ticker.link <- paste("http://eodhistoricaldata.com/api/eod/", symbol, "?api_token=", api.token, "&period=2017-08-22&order=d", sep="")
data <- read.csv(url(ticker.link))
head(data)
ticker.link <- paste("http://eodhistoricaldata.com/api/eod/", symbol, "?api_token=", api.token, "&date=2017-08-22&order=d", sep="")
data <- read.csv(url(ticker.link))
head(data)
ticker.link <- paste("http://eodhistoricaldata.com/api/eod/", symbol, "?api_token=", api.token, "&from=2017-08-22&to=2017-08-22&order=d", sep="")
data <- read.csv(url(ticker.link))
ticker.link <- paste("http://eodhistoricaldata.com/api/eod/", symbol, "?api_token=", api.token, "&from=2017-08-22&to=2017-08-22&period=d&order=d", sep="")
data <- read.csv(url(ticker.link))
read.csv(url(ticker.link))
ticker.link <- paste("http://eodhistoricaldata.com/api/eod/", symbol, "?api_token=", api.token, "&from=2017-08-22&to=2017-08-22", sep="")
read.csv(url(ticker.link))
url(ticker.link)
ticker.link <- paste("http://eodhistoricaldata.com/api/eod/", symbol, "?api_token=", api.token, "&from=2017-08-22", sep="")
url(ticker.link)
read.csv(url(ticker.link))
ticker.link <- paste("http://eodhistoricaldata.com/api/eod/", symbol, "?api_token=", api.token, "&from=2017-08-22&to=2017-08-23", sep="")
read.csv(url(ticker.link))
ticker.link <- paste("http://eodhistoricaldata.com/api/eod/", symbol, "?api_token=", api.token, "&from=2017-08-22&to=2017-08-23&period=d", sep="")
read.csv(url(ticker.link))
read.csv(url(ticker.link),-1)
read.csv(url(ticker.link),nrows=2)
ticker.link <- paste("http://eodhistoricaldata.com/api/eod/", symbol, "?api_token=", api.token, "&from=2017-08-22&to=2017-08-22&period=d", sep="")
read.csv(url(ticker.link),nrows=2)
read.csv(url(ticker.link),nrows=1)
data <-read.csv(url(ticker.link),nrows=1)
head(data)
data
dead
head
quit
bye
quit()
library(methods)
parentsmoke=as.factor(c(2,1,0))
response <- cbind(c(400,416,188),c(1380,1823,1168))
response
smoke.logistic <- glm(response ~ parentsmoke, family=binomial(link=logit))
smoke.logistic
summary(smoke.logistic)
anova(smoke.logistic)
library(devtools)
require(lmr)
install.packages("devtools")
devtools::install_github("rstudio/bookdown")
require(devtools)
remove.packages(devtools)
require(devtools)
require(devtools)install.packages()
devtools::install_deps()
install.packages(devtools)
install.packages("devtools")
remove.packages(git2r)
remove.packages("git2r"")
""
remove.packages("git2r")
quit
require("devtools")
library('iml')
library('randomForest')
data("Boston", package  = "MASS")
mod = randomForest(medv ~ ., data = Boston, ntree = 50)
imp = feature.imp(mod, Boston, y = Boston$medv, loss = 'mae')
plot(imp)
1+1
0.5
initial = 0.5
initial
:D
^^
10^10^100
10^100
Inf+4
0=4
0==4
111111*Inf==99999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999
10^63
1/0
0/0
1/0
0^0
0^0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001
get.cervical.data = memoise(function(){
cervical = read.csv(sprintf('%s/risk_factors_cervical_cancer.csv', data_dir), na.strings = c('?'), stringsAsFactors = FALSE)
cervical = select(cervical, -Citology, -Schiller, -Hinselmann)
cervical$Biopsy = factor(cervical$Biopsy, levels = c(1, 0), labels=c('Cancer', 'Healthy'))
## subset variables to the ones that should be used in the book
cervical = dplyr::select(cervical, Age, Number.of.sexual.partners, First.sexual.intercourse,
Num.of.pregnancies, Smokes, Smokes..years., Hormonal.Contraceptives, Hormonal.Contraceptives..years.,
IUD, IUD..years., STDs, STDs..number., STDs..Number.of.diagnosis, STDs..Time.since.first.diagnosis,
STDs..Time.since.last.diagnosis, Biopsy)
# NA imputation
imputer = mlr::imputeMode()
cervical_impute = mlr::impute(cervical, classes = list(numeric = imputeMode()))
cervical = cervical_impute$data
})
library(memoise)
get.cervical.data = memoise(function(){
cervical = read.csv(sprintf('%s/risk_factors_cervical_cancer.csv', data_dir), na.strings = c('?'), stringsAsFactors = FALSE)
cervical = select(cervical, -Citology, -Schiller, -Hinselmann)
cervical$Biopsy = factor(cervical$Biopsy, levels = c(1, 0), labels=c('Cancer', 'Healthy'))
## subset variables to the ones that should be used in the book
cervical = dplyr::select(cervical, Age, Number.of.sexual.partners, First.sexual.intercourse,
Num.of.pregnancies, Smokes, Smokes..years., Hormonal.Contraceptives, Hormonal.Contraceptives..years.,
IUD, IUD..years., STDs, STDs..number., STDs..Number.of.diagnosis, STDs..Time.since.first.diagnosis,
STDs..Time.since.last.diagnosis, Biopsy)
# NA imputation
imputer = mlr::imputeMode()
cervical_impute = mlr::impute(cervical, classes = list(numeric = imputeMode()))
cervical = cervical_impute$data
})
get.cervical.data
get.cervical.data()
setwd()
getwd()
get.cervical.data()
data_dir
library(memoise)
library(mlr)
# Source:
# https://github.com/yj-danielyang/interpretable-ml-book/blob/master/R/get-cervical-cancer-dataset.R
get.cervical.data = memoise(function(){
cervical = read.csv(sprintf('%s/risk_factors_cervical_cancer.csv', data_dir), na.strings = c('?'), stringsAsFactors = FALSE)
cervical = select(cervical, -Citology, -Schiller, -Hinselmann)
cervical$Biopsy = factor(cervical$Biopsy, levels = c(1, 0), labels=c('Cancer', 'Healthy'))
## subset variables to the ones that should be used in the book
cervical = dplyr::select(cervical, Age, Number.of.sexual.partners, First.sexual.intercourse,
Num.of.pregnancies, Smokes, Smokes..years., Hormonal.Contraceptives, Hormonal.Contraceptives..years.,
IUD, IUD..years., STDs, STDs..number., STDs..Number.of.diagnosis, STDs..Time.since.first.diagnosis,
STDs..Time.since.last.diagnosis, Biopsy)
# NA imputation
imputer = mlr::imputeMode()
cervical_impute = mlr::impute(cervical, classes = list(numeric = imputeMode()))
cervical = cervical_impute$data
})
get.cervical.task = (function(){
cervical = get.cervical.data()
mlr::makeClassifTask(id='cervical', data = cervical, target = 'Biopsy')
})
data_dir = "/Users/Daniel/Documents/GitHub/Interpretable-Machine-Learning/Python"
get.cervical.data()
library(memoise)
library(mlr)
library(dplyr)
# Source:
# https://github.com/yj-danielyang/interpretable-ml-book/blob/master/R/get-cervical-cancer-dataset.R
get.cervical.data = memoise(function(){
cervical = read.csv(sprintf('%s/risk_factors_cervical_cancer.csv', data_dir), na.strings = c('?'), stringsAsFactors = FALSE)
cervical = select(cervical, -Citology, -Schiller, -Hinselmann)
cervical$Biopsy = factor(cervical$Biopsy, levels = c(1, 0), labels=c('Cancer', 'Healthy'))
## subset variables to the ones that should be used in the book
cervical = dplyr::select(cervical, Age, Number.of.sexual.partners, First.sexual.intercourse,
Num.of.pregnancies, Smokes, Smokes..years., Hormonal.Contraceptives, Hormonal.Contraceptives..years.,
IUD, IUD..years., STDs, STDs..number., STDs..Number.of.diagnosis, STDs..Time.since.first.diagnosis,
STDs..Time.since.last.diagnosis, Biopsy)
# NA imputation
imputer = mlr::imputeMode()
cervical_impute = mlr::impute(cervical, classes = list(numeric = imputeMode()))
cervical = cervical_impute$data
})
get.cervical.task = (function(){
cervical = get.cervical.data()
mlr::makeClassifTask(id='cervical', data = cervical, target = 'Biopsy')
})
data_dir = "/Users/Daniel/Documents/GitHub/Interpretable-Machine-Learning/Python"
get.cervical.data()
#library(memoise)
library(mlr)
library(dplyr)
# Source:
# https://github.com/yj-danielyang/interpretable-ml-book/blob/master/R/get-cervical-cancer-dataset.R
get.cervical.data = memoise(function(){
cervical = read.csv(sprintf('%s/risk_factors_cervical_cancer.csv', data_dir), na.strings = c('?'), stringsAsFactors = FALSE)
cervical = select(cervical, -Citology, -Schiller, -Hinselmann)
cervical$Biopsy = factor(cervical$Biopsy, levels = c(1, 0), labels=c('Cancer', 'Healthy'))
## subset variables to the ones that should be used in the book
cervical = dplyr::select(cervical, Age, Number.of.sexual.partners, First.sexual.intercourse,
Num.of.pregnancies, Smokes, Smokes..years., Hormonal.Contraceptives, Hormonal.Contraceptives..years.,
IUD, IUD..years., STDs, STDs..number., STDs..Number.of.diagnosis, STDs..Time.since.first.diagnosis,
STDs..Time.since.last.diagnosis, Biopsy)
# NA imputation
imputer = mlr::imputeMode()
cervical_impute = mlr::impute(cervical, classes = list(numeric = imputeMode()))
cervical = cervical_impute$data
})
get.cervical.task = (function(){
cervical = get.cervical.data()
mlr::makeClassifTask(id='cervical', data = cervical, target = 'Biopsy')
})
data_dir = "/Users/Daniel/Documents/GitHub/Interpretable-Machine-Learning/Python"
install.packages('rsconnect')
rsconnect::setAccountInfo(name='danielyang',
token='58B701A793A956384FA6F7F4F1D5B9F0',
secret='NZ/lQS4EpDaf3UzOQIU0CCvvfiEU9mRuXMz7gq1u')
library(rsconnect)
quit
library(rsconnect)
library(shiny)
library(shiny)
ui <- fluidPage()
server <- function(input, output) {}
shinyApp(ui = ui, server = server)
library(shiny)
ui <- fluidPage("Hello world")
server <- function(input, output) {}
shinyApp(ui = ui, server = server)
runApp('Documents/GitHub/k-means-clustering/R/shiny.R')
runApp('Documents/GitHub/k-means-clustering/R/shiny.R')
runApp('Documents/GitHub/k-means-clustering/R/shiny.R')
runApp('Documents/GitHub/k-means-clustering/R/shiny.R')
runApp('Documents/GitHub/k-means-clustering/R/shiny.R')
runApp('Documents/GitHub/k-means-clustering/R/shiny.R')
runApp('Documents/GitHub/k-means-clustering/R/shiny.R')
plot(x,y)
x <- seq(0,50,by=1)
y <- dbinom(x,50,0.2)
plot(x,y)
x <- seq(0,50,by=1)
y <- dbinom(x,50,0.5)
plot(x,y)
x <- seq(0,10,by=1)
y <- dbinom(x,50,0.5)
plot(x,y)
x <- seq(0,20,by=1)
y <- dbinom(x,10,0.5)
plot(x,y)
x <- seq(0,10,by=1)
y <- dbinom(x,10,0.5)
plot(x,y)
x <- seq(0,10,by=1)
y <- dbinom(x,10,0.5)
lines(x,y)
runApp('Documents/GitHub/distribution/R/shiny.R')
runApp('Documents/GitHub/distribution/R/shiny.R')
runApp('Documents/GitHub/distribution/R/shiny.R')
runApp('Documents/GitHub/distribution/R/shiny.R')
runApp('Documents/GitHub/distribution/R/shiny.R')
runApp('Documents/GitHub/distribution/R/shiny.R')
runApp('Documents/GitHub/distribution/R/shiny.R')
runApp('Documents/GitHub/distribution/R/shiny.R')
runApp('Documents/GitHub/distribution/R/shiny.R')
runApp('Documents/GitHub/distribution/R/shiny.R')
runApp('Documents/GitHub/distribution/R/shiny.R')
runApp('Documents/GitHub/distribution/R/shiny.R')
runApp('Documents/GitHub/distribution/R/shiny.R')
runApp('Documents/GitHub/distribution/R/shiny.R')
runApp('Documents/GitHub/distribution/R/shiny.R')
runApp('Documents/GitHub/distribution/R')
devtools::install_github("rstudio/shinyapps")
library(rsconnect)
rsconnect::setAccountInfo(name='danielyang',
token='58B701A793A956384FA6F7F4F1D5B9F0',
secret='NZ/lQS4EpDaf3UzOQIU0CCvvfiEU9mRuXMz7gq1u')
shiny::runApp('Documents/GitHub/distribution/R')
shiny::runApp('Documents/GitHub/distribution/R')
